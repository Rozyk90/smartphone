interface KeyboardProps {
  setTxt: React.Dispatch<React.SetStateAction<string>>;
  txt: string;
}

export default function KeyboardQWERTY({ setTxt, txt }: KeyboardProps) {
  const [shift, setShift] = useState(false);
  const [specialSings, setSpecialSings] = useState(false);

  const specialRow = ["!", "?", "#", "@", "%", "^", "&", "*", "(", ")"];
  const numbersRow = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"];

  const rows = [
    specialSings ? specialRow : numbersRow,
    ["q", "w", "e", "r", "t", "y", "u", "i", "o", "p"],
    ["a", "s", "d", "f", "g", "h", "j", "k", "l"],
    ["Shift", "z", "x", "c", "v", "b", "n", "m", "Backspace"],
    ["Special", " ", ",", "."],
  ];

  const specialSingsList = ["Shift", "Special", "Backspace"];

  const btnAction = (key: string) => {
    console.log(key,'hejo')
    if (key === "Shift") {
      setShift(!shift);
    } else if (key === "Backspace") {
      setTxt((prevTxt) => prevTxt.slice(0, -1));
    } else if (key === "Special") {
      setSpecialSings(!specialSings);
    } else {
      const newKey = shift ? key.toUpperCase() : key;
      setTxt((prevTxt) => prevTxt + newKey);
      if (shift) setShift(false);
    }
  };

  function renderSing(sing: string) {
    switch (sing) {
      case "Shift":
        return <FileUploadRoundedIcon />;
      case "Backspace":
        return <BackspaceRoundedIcon fontSize="small" />;
      case " ":
        return <SpaceBarRoundedIcon />;
      case "Special":
        return specialSings ? "ABC" : "!?#";
      default:
        return sing;
    }
  }

  const renderButton = (key: string) =>
    key === " " ? (
      <StyledSpaceKey key={key} />
    ) : (
      <Key
        key={key}
        onClick={() => console.log('vcxvx')}
        $special={specialSingsList.includes(key)}
        $shiftColor={shift && key === "Shift"}
        $shift={shift}
      >
        {renderSing(key)}
      </Key>
    );

    useEffect(() => {
      console.log('aaaaa')
      const keyDown = (e: KeyboardEvent) => {
        btnAction(e.key);
      };
      window.addEventListener("keydown", keyDown);
      return () => {
        window.removeEventListener("keydown", keyDown);
      };
    }, [setTxt, txt]);


  return (
    <KeyboardContainer>
      {rows.map((row, rowIndex) => (
        <Row key={rowIndex}>{row.map(renderButton)}</Row>
      ))}
    </KeyboardContainer>
  );
}